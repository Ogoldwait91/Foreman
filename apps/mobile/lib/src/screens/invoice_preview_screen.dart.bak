import "package:flutter/material.dart";
import "package:printing/printing.dart";
import "package:open_filex/open_filex.dart";
import "../theme.dart";
import "../data/app_store.dart";
import "../models/invoice.dart";
import "../models/client.dart";
import "../models/job.dart";
import "../services/pdf_service.dart";
import "../services/storage_service.dart";
import "../utils/utils.dart";

class InvoicePreviewScreen extends StatelessWidget {
  final String invoiceId;
  const InvoicePreviewScreen({super.key, required this.invoiceId});

  @override
  Widget build(BuildContext context) {
    final store = AppStore();
    final inv = store.invoices.firstWhere((i) => i.id == invoiceId);
    final client = store.clients.firstWhere(
      (c) => c.id == inv.clientId,
      orElse: () => Client(id: "unknown", name: "Unknown"),
    );
    final Job? job = inv.jobId == null
        ? null
        : store.jobs.firstWhere(
            (j) => j.id == inv.jobId,
            orElse: () => Job(id: "", name: ""),
          );

    final String? jobSlug = (job != null && job.id.isNotEmpty)
        ? slugify(job.name)
        : null;

    Future<void> sharePdf() async {
      final data = await PdfService.buildInvoicePdf(
        client: client,
        invoice: inv,
        businessName: "Foreman User",
      );
      await Printing.sharePdf(bytes: data, filename: "invoice_${inv.id}.pdf");
    }

    Future<void> savePdf() async {
      final data = await PdfService.buildInvoicePdf(
        client: client,
        invoice: inv,
        businessName: "Foreman User",
      );
      final path = await StorageService.saveInvoicePdf(
        data,
        issued: inv.issueDate,
        fileName: "invoice_${inv.id}",
        jobSlug: jobSlug,
      );
      AppStore().setInvoicePdfPath(inv.id, path);
      // ignore: use_build_context_synchronously
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text("Saved to $path")));
    }

    Future<void> viewPdf() async {
      if (inv.pdfPath == null) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text("Save the PDF first.")));
        return;
      }
      await OpenFilex.open(inv.pdfPath!);
    }

    return Scaffold(
      backgroundColor: ForemanColors.navy,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        surfaceTintColor: Colors.transparent,
        title: Text(
          job?.name.isNotEmpty == true ? "Invoice â€¢ ${job!.name}" : "Invoice",
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.only(right: 8),
            child: _StatusChip(status: inv.status),
          ),
        ],
      ),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 8),
        children: [
          // (content unchanged; actions below)
          Card(
            child: ListTile(
              title: Text(client.name),
              subtitle: Text(
                inv.issueDate.toLocal().toIso8601String().substring(0, 10),
              ),
            ),
          ),
          // ... items & totals (kept as before for brevity) ...
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  _kv("Subtotal", money(inv.subtotal)),
                  _kv(
                    "VAT (${(inv.vatRate * 100).toStringAsFixed(0)}%)",
                    money(inv.vat),
                    color: ForemanColors.amber,
                  ),
                  const Divider(height: 24),
                  _kv("Total", money(inv.total), bold: true),
                ],
              ),
            ),
          ),

          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Column(
              children: [
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: sharePdf,
                        icon: const Icon(Icons.ios_share),
                        label: const Text("Share PDF"),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: savePdf,
                        icon: const Icon(Icons.save),
                        label: const Text("Save PDF"),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: viewPdf,
                        icon: const Icon(Icons.picture_as_pdf),
                        label: const Text("View PDF"),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(height: 24),
        ],
      ),
    );
  }

  Widget _kv(String k, String v, {bool bold = false, Color? color}) => Padding(
    padding: const EdgeInsets.symmetric(vertical: 6),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(k),
        Text(
          v,
          style: TextStyle(
            fontWeight: bold ? FontWeight.w800 : FontWeight.w700,
            color: color,
            fontSize: bold ? 18 : 14,
          ),
        ),
      ],
    ),
  );
}

class _StatusChip extends StatelessWidget {
  final InvoiceStatus status;
  const _StatusChip({required this.status});
  @override
  Widget build(BuildContext context) {
    Color bg;
    String text;
    switch (status) {
      case InvoiceStatus.draft:
        bg = ForemanColors.amber;
        text = "Draft";
        break;
      case InvoiceStatus.sent:
        bg = ForemanColors.white;
        text = "Sent";
        break;
      case InvoiceStatus.paid:
        bg = ForemanColors.green;
        text = "Paid";
        break;
      case InvoiceStatus.overdue:
        bg = ForemanColors.magenta;
        text = "Overdue";
        break;
    }
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
      decoration: BoxDecoration(
        color: bg.withValues(alpha: 0.20),
        border: Border.all(color: bg.withValues(alpha: 0.85)),
        borderRadius: BorderRadius.circular(999),
      ),
      child: Text(
        text,
        style: TextStyle(color: bg, fontWeight: FontWeight.w700),
      ),
    );
  }
}
