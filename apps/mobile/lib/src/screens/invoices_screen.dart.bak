import "package:flutter/material.dart";
import "package:printing/printing.dart";
import "../theme.dart";
import "../data/app_store.dart";
import "../models/invoice.dart";
import "../models/client.dart";
import "../services/pdf_service.dart";
import "../services/storage_service.dart";
import "new_invoice_screen.dart";
import "invoice_preview_screen.dart";

class InvoicesScreen extends StatelessWidget {
  const InvoicesScreen({super.key});

  Color _statusColor(InvoiceStatus s) {
    switch (s) {
      case InvoiceStatus.draft:
        return ForemanColors.amber;
      case InvoiceStatus.sent:
        return ForemanColors.white;
      case InvoiceStatus.paid:
        return ForemanColors.green;
      case InvoiceStatus.overdue:
        return ForemanColors.magenta;
    }
  }

  String _statusText(InvoiceStatus s) {
    switch (s) {
      case InvoiceStatus.draft:
        return "Draft";
      case InvoiceStatus.sent:
        return "Sent";
      case InvoiceStatus.paid:
        return "Paid";
      case InvoiceStatus.overdue:
        return "Overdue";
    }
  }

  Future<void> _sharePdf(
    BuildContext context,
    Invoice inv,
    Client client,
  ) async {
    final data = await PdfService.buildInvoicePdf(
      client: client,
      invoice: inv,
      businessName: "Foreman User",
    );
    await Printing.sharePdf(bytes: data, filename: "invoice_${inv.id}.pdf");
  }

  Future<void> _savePdf(
    BuildContext context,
    Invoice inv,
    Client client,
  ) async {
    final data = await PdfService.buildInvoicePdf(
      client: client,
      invoice: inv,
      businessName: "Foreman User",
    );
    final path = await StorageService.saveInvoicePdf(
      data,
      issued: inv.issueDate,
      fileName: "invoice_${inv.id}",
    );
    AppStore().setInvoicePdfPath(inv.id, path);
    // ignore: use_build_context_synchronously
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(SnackBar(content: Text("Saved to $path")));
  }

  @override
  Widget build(BuildContext context) {
    final store = AppStore();
    final invoices = store.invoices;

    return Scaffold(
      backgroundColor: ForemanColors.navy,
      appBar: AppBar(
        title: const Text("Invoices"),
        backgroundColor: Colors.transparent,
        surfaceTintColor: Colors.transparent,
      ),
      body: invoices.isEmpty
          ? _EmptyInvoices(
              onNew: () {
                Navigator.of(context).push(
                  MaterialPageRoute(builder: (_) => const NewInvoiceScreen()),
                );
              },
            )
          : ListView.builder(
              itemCount: invoices.length,
              itemBuilder: (_, i) {
                final inv = invoices[i];
                final client = store.clients.firstWhere(
                  (c) => c.id == inv.clientId,
                  orElse: () => Client(id: "unknown", name: "Unknown"),
                );

                return Dismissible(
                  key: ValueKey(inv.id),
                  background: _swipeBg(
                    Icons.check_circle,
                    "Mark paid",
                    ForemanColors.green,
                  ),
                  secondaryBackground: _swipeBg(
                    Icons.outgoing_mail,
                    "Mark sent",
                    ForemanColors.white,
                  ),
                  confirmDismiss: (direction) async {
                    if (direction == DismissDirection.startToEnd) {
                      AppStore().markInvoicePaid(inv.id);
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text("Marked as Paid")),
                      );
                    } else {
                      AppStore().markInvoiceSent(inv.id);
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text("Marked as Sent")),
                      );
                    }
                    // Return false so the tile isn't removed from the list.
                    return false;
                  },
                  child: Card(
                    child: ListTile(
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (_) =>
                              InvoicePreviewScreen(invoiceId: inv.id),
                        ),
                      ),
                      title: Text(client.name),
                      subtitle: Text(
                        "${_statusText(inv.status)}  •  ${inv.issueDate.toLocal().toIso8601String().substring(0, 10)}",
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "£${inv.total.toStringAsFixed(2)}",
                            style: TextStyle(
                              fontWeight: FontWeight.w700,
                              color: _statusColor(inv.status),
                            ),
                          ),
                          const SizedBox(width: 6),
                          PopupMenuButton<String>(
                            onSelected: (v) async {
                              switch (v) {
                                case "preview":
                                  Navigator.of(context).push(
                                    MaterialPageRoute(
                                      builder: (_) => InvoicePreviewScreen(
                                        invoiceId: inv.id,
                                      ),
                                    ),
                                  );
                                  break;
                                case "share":
                                  await _sharePdf(context, inv, client);
                                  break;
                                case "save":
                                  await _savePdf(context, inv, client);
                                  break;
                                case "markPaid":
                                  AppStore().markInvoicePaid(inv.id);
                                  break;
                                case "markSent":
                                  AppStore().markInvoiceSent(inv.id);
                                  break;
                              }
                            },
                            itemBuilder: (ctx) => [
                              const PopupMenuItem(
                                value: "preview",
                                child: ListTile(
                                  leading: Icon(Icons.visibility),
                                  title: Text("Preview"),
                                ),
                              ),
                              const PopupMenuItem(
                                value: "share",
                                child: ListTile(
                                  leading: Icon(Icons.ios_share),
                                  title: Text("Share PDF"),
                                ),
                              ),
                              const PopupMenuItem(
                                value: "save",
                                child: ListTile(
                                  leading: Icon(Icons.save),
                                  title: Text("Save PDF"),
                                ),
                              ),
                              const PopupMenuDivider(),
                              const PopupMenuItem(
                                value: "markPaid",
                                child: ListTile(
                                  leading: Icon(Icons.check_circle),
                                  title: Text("Mark paid"),
                                ),
                              ),
                              const PopupMenuItem(
                                value: "markSent",
                                child: ListTile(
                                  leading: Icon(Icons.outgoing_mail),
                                  title: Text("Mark sent"),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => Navigator.of(
          context,
        ).push(MaterialPageRoute(builder: (_) => const NewInvoiceScreen())),
        label: const Text("New invoice"),
        icon: const Icon(Icons.add),
      ),
    );
  }

  static Widget _swipeBg(IconData icon, String label, Color color) {
    return Container(
      alignment: Alignment.centerLeft,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.20),
        borderRadius: BorderRadius.circular(18),
        border: Border.all(color: color.withValues(alpha: 0.8)),
      ),
      child: Row(
        children: [
          Icon(icon, color: color),
          const SizedBox(width: 8),
          Text(
            label,
            style: TextStyle(color: color, fontWeight: FontWeight.w700),
          ),
        ],
      ),
    );
  }
}

class _EmptyInvoices extends StatelessWidget {
  final VoidCallback onNew;
  const _EmptyInvoices({required this.onNew});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.receipt_long,
              size: 72,
              color: ForemanColors.white,
            ),
            const SizedBox(height: 12),
            const Text(
              "No invoices yet",
              style: TextStyle(
                color: ForemanColors.white,
                fontSize: 20,
                fontWeight: FontWeight.w700,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              "Create your first invoice to get started.",
              textAlign: TextAlign.center,
              style: TextStyle(color: ForemanColors.white),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: onNew,
              icon: const Icon(Icons.add),
              label: const Text("New invoice"),
            ),
          ],
        ),
      ),
    );
  }
}
